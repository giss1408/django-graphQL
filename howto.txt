# Web ressource
https://dockerize.io/guides/python-django-guide

#local start
source env/bin/activate

# django
  * python manage.py makemigrations
  * python manage.py migrate
  * python manage.py runserver

  * clean
    - find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
    - find . -path "*/migrations/*.pyc" -delete

# start build docker container
docker build -t python-django-immoizi-app .

# run the container
 docker run -it -p 8000:8000 python-django-immoizi-app
 # see container id
 docker ps -a

 # stop the container
 docker stop container_id


 # graphQL query
{
  tenants {
    id,
    nomPrenoms,
    expireDate,
    statusPayment
  }
  descriptions {
    country,
    dateCreated,
    city,
    district,
    bailleur {
      nomPrenoms
    },
    category {
      title
    }
  }
}


Response 
{
  "data": {
    "tenants": [
      {
        "id": "1",
        "nomPrenoms": "izi-immobilier",
        "expireDate": "2023-01-27",
        "statusPayment": true
      }
    ],
    "descriptions": [
      {
        "country": "CÃ´te d'Ivoire",
        "dateCreated": "2022-09-23",
        "city": "Abidjan",
        "district": "Marcory",
        "bailleur": {
          "nomPrenoms": "izi-immobilier"
        },
        "category": {
          "title": "Residence"
        }
      }
    ]
  }
}


### models
from django.db import models

class Stock(models.Model):
    stock_code = models.CharField(max_length=10, unique=True)
    name = models.CharField(max_length=100)
    current_price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return self.stock_code

class Portfolio(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class PortfolioStock(models.Model):
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE)
    stock = models.ForeignKey(Stock, on_delete=models.CASCADE)
    buy_value = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.IntegerField()
    buy_date = models.DateField()

    @property
    def current_value(self):
        return self.stock.current_price * self.quantity

    @property
    def today_change(self):
        return (self.stock.current_price - self.buy_value) * self.quantity

    def __str__(self):
        return f"{self.portfolio.name} - {self.stock.stock_code}"


